generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./db.db"
}

model User {
  id        Int      @id @default(autoincrement())
  userName  String   @unique
  password  String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  transactions Transaction[]
}

model Currency {
  currencyId Int     @id @default(autoincrement())
  name       String  @unique
  code       String?

  // Relations
  incomingExchangeRates ExchangeRate[] @relation("IncomingCurrency")
  outgoingExchangeRates ExchangeRate[] @relation("OutgoingCurrency")
  depts                 debts[]
}

model ExchangeRate {
  rateId       Int      @id @default(autoincrement())
  exchangeRate Int
  createDate   DateTime @default(now())

  // Relations
  incomingCurrency Currency      @relation("IncomingCurrency", fields: [incomingCurrencyId], references: [currencyId])
  outgoingCurrency Currency      @relation("OutgoingCurrency", fields: [outgoingCurrencyId], references: [currencyId])
  transactions     Transaction[]

  // Foreign keys
  incomingCurrencyId Int
  outgoingCurrencyId Int
}

model Transaction {
  transactionId  Int      @id @default(autoincrement())
  createDate     DateTime @default(now())
  incomingAmount Int
  outgoingAmount Int
  name           String?
  note           String?

  // Relations
  exchangeRate ExchangeRate? @relation(fields: [exchangeRateId], references: [rateId], onDelete: Cascade)
  user         User?         @relation(fields: [userId], references: [id])

  // Foreign keys
  exchangeRateId Int
  userId         Int
}

model App {
  id         Int    @id @default(autoincrement())
  marketName String
  version    String
}

model debts {
  id         Int      @id @default(autoincrement())
  name       String
  amount     Int
  currency   Currency @relation(fields: [currencyId], references: [currencyId])
  currencyId Int
  forUs      Boolean

  createDate DateTime @default(now())
}
